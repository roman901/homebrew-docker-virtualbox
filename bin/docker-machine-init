#!/usr/bin/env bash
set -e
[[ $1 == "debug" ]] && {
  set -x
}
if [[ $(id -u ${USER}) -eq 0 ]]; then
  echo "Please don't run this script under the root user!"
  exit 1
fi
LOGDIR="/tmp";

[[ $1 != "initialize" ]] && [[ $1 != "debug" ]] && {
    exec > ${LOGDIR}/docker-virtualbox.log
    exec 2>&1
}

START_TIME=$(date +%s)

if [[ -n "${BREW_BIN}" ]]; then
    BREW_BIN=$BREW_BIN
elif [[ "Darwin" == "$(uname)" ]]; then
    BREW_BIN=/usr/local/bin
else
    BREW_BIN=/home/linuxbrew/.linuxbrew/bin
fi

PATH="${PATH}:${BREW_BIN}"
GOBETWEEN_BIN=$(brew --prefix)/opt/docker-virtualbox/bin/gobetween
TERMINAL_NOTIFIER_BIN="$(brew --prefix terminal-notifier)/bin/terminal-notifier -appIcon $(brew --prefix docker-virtualbox)/djocker.png"
JQ_BIN="$(brew --prefix jq)/bin/jq"
DOCKER_MACHINE_BIN=$(brew --prefix docker-machine)/bin/docker-machine
DOCKER_MACHINE_NFS_BIN=$(brew --prefix docker-machine-nfs-generic)/bin/docker-machine-nfs-generic

DOCKER_MACHINE_DRIVER=${DOCKER_DRIVER-virtualbox}
DOCKER_MACHINE_MACHINE_NAME=${DOCKER_MACHINE_NAME-docker}

function stop()
{
    [[ -f /tmp/docker-virtualbox.env ]] && rm /tmp/docker-virtualbox.env
    [[ -f /tmp/docker-virtualbox-machine.env ]] && rm /tmp/docker-virtualbox-machine.env
    echo "===> Stopping docker machine: ${DOCKER_MACHINE_MACHINE_NAME}"
    ${TERMINAL_NOTIFIER_BIN} -title "Docker Virtualbox" -message "Stopping virtual machine: '${DOCKER_MACHINE_MACHINE_NAME}'"
    ${DOCKER_MACHINE_BIN} stop ${DOCKER_MACHINE_MACHINE_NAME}
    exit 0
}

trap stop SIGKILL
trap stop SIGTERM
trap stop SIGINT


${TERMINAL_NOTIFIER_BIN} -title "Docker Virtualbox" -message "Initialize..."
sleep 1

if [[ -z ${DOCKER_MACHINE_DISK_SIZE} ]]; then
    DOCKER_MACHINE_DISK_SIZE="16000"
    if [[ $($(brew --prefix coreutils)/libexec/gnubin/df --block-size=1073741824 | grep '\/$' | awk '{print $2}') -gt 200 ]]; then
        DOCKER_MACHINE_DISK_SIZE="32000"
    fi
fi

if [[ -z ${DOCKER_MACHINE_CPU_COUNT} ]]; then
    if [[ "Darwin" == "$(uname)" ]]; then
        DOCKER_MACHINE_CPU_COUNT=$(sysctl -n hw.ncpu | awk 'function ceil(x, y){y=int(x); return(x>y?y+1:y)} { print ceil($1*0.25) }')
    else
        DOCKER_MACHINE_CPU_COUNT=$(grep ^cpu\\scores /proc/cpuinfo | uniq |  awk '{print $4}' | awk 'function ceil(x, y){y=int(x); return(x>y?y+1:y)} { print ceil($1*0.25) }')
    fi
fi

if [[ -z ${DOCKER_MACHINE_MEMORY_COUNT} ]]; then
    if [[ "Darwin" == "$(uname)" ]]; then
        DOCKER_MACHINE_MEMORY_COUNT=$(sysctl -n hw.memsize | awk '{ mem=($1 * 0.25 / 1024 / 1024 ); print int(mem > 4096 ? 4096 : mem) }')
    else
        DOCKER_MACHINE_MEMORY_COUNT=$(free -b | grep Mem | awk '{ mem=($2 * 0.25 / 1024 / 1024 ); print int(mem > 4096 ? 4096 : mem) }')
    fi
fi

[[ "Running" == $(${DOCKER_MACHINE_BIN} status ${DOCKER_MACHINE_MACHINE_NAME}) ]] && {
touch /tmp/docker-virtualbox.starting
echo "===> Virtual machine '${DOCKER_MACHINE_MACHINE_NAME}' already started"
${TERMINAL_NOTIFIER_BIN} -title "Docker Virtualbox" -message "Virtual machine '${DOCKER_MACHINE_MACHINE_NAME}' started"
} || {
    touch /tmp/docker-virtualbox.starting
    [[ "Stopped" == $(${DOCKER_MACHINE_BIN} status ${DOCKER_MACHINE_MACHINE_NAME}) ]] && {
        ${TERMINAL_NOTIFIER_BIN} -title "Docker Virtualbox" -message "Starting virtual machine: ${DOCKER_MACHINE_MACHINE_NAME}"
        echo "===> Starting docker machine: ${DOCKER_MACHINE_MACHINE_NAME}"
        ${DOCKER_MACHINE_BIN} start ${DOCKER_MACHINE_MACHINE_NAME}
    } || {
        echo "===> Creating docker machine: ${DOCKER_MACHINE_MACHINE_NAME}"
        ${TERMINAL_NOTIFIER_BIN} -title "Docker Virtualbox" -message "Creating virtual machine: ${DOCKER_MACHINE_MACHINE_NAME}"
        ${DOCKER_MACHINE_BIN} create --driver ${DOCKER_MACHINE_DRIVER} \
            --virtualbox-cpu-count ${DOCKER_MACHINE_CPU_COUNT} \
            --virtualbox-memory ${DOCKER_MACHINE_MEMORY_COUNT} \
            --virtualbox-disk-size ${DOCKER_MACHINE_DISK_SIZE} \
            ${DOCKER_MACHINE_MACHINE_NAME}
    }

    # Extra vm options
    ${DOCKER_MACHINE_BIN} ssh ${DOCKER_MACHINE_MACHINE_NAME} sudo sysctl -w vm.max_map_count=262144
}

${TERMINAL_NOTIFIER_BIN} -title "Docker Virtualbox" -message "Configuring NFS mount for: '${DOCKER_MACHINE_MACHINE_NAME}'"

${DOCKER_MACHINE_NFS_BIN} ${DOCKER_MACHINE_MACHINE_NAME}

[[ $1 == "initialize" ]] && {
    echo ""
    echo -e "\033[91m>>>>> \033[92m *** CONGRATULATION *** DOCKER READY TO USE *** \033[91m<<<<<"
    echo -e "\033[0m"
    echo "Please start the service by following command:"
    echo -e "\033[0m"
    echo -e "\033[0m"
    echo -e "    \033[96mbrew services start docker-virtualbox"
    echo -e "\033[0m"
    exit 0
}

echo "===> Starting Gobetween..."
[[ -f /tmp/docker-virtualbox-gobetween.pid ]] && ps -p $(cat /tmp/docker-virtualbox-gobetween.pid) > /dev/null && {
    echo "---> Gobetween already started, disabling outdated port forwarding..."
    servers=$(curl --silent http://127.0.0.1:8181/servers | ${JQ_BIN} -r '. | keys | .[]')
    for server in $servers;  do
        echo "Disabling port forwarding for: ${server}"
        curl --silent -X DELETE http://127.0.0.1:8181/servers/${server}
    done
} || {
    sudo ${GOBETWEEN_BIN} -c $(brew --prefix)/etc/docker-virtualbox/gobetween.toml > ${LOGDIR}/docker-virtualbox-gobetween.log 2>&1 &
    echo $! > /tmp/docker-virtualbox-gobetween.pid
    echo "---> Gobetween started"
}

# setup env
echo "export DOCKER_CLI_BIN_PATH=\"$(brew --prefix docker)/bin/docker\"" > /tmp/docker-virtualbox.env
echo "export DOCKER_COMPOSE_BIN_PATH=\"$(brew --prefix docker-compose)/bin/docker-compose\"" >> /tmp/docker-virtualbox.env
echo "export DOCKER_MACHINE_IP=\"$(${DOCKER_MACHINE_BIN} ip ${DOCKER_MACHINE_MACHINE_NAME})\"" >> /tmp/docker-virtualbox.env
${DOCKER_MACHINE_BIN} env ${DOCKER_MACHINE_MACHINE_NAME} --shell bash >> /tmp/docker-virtualbox-machine.env
${TERMINAL_NOTIFIER_BIN} -title "Docker Virtualbox" -message "Virtual machine '${DOCKER_MACHINE_MACHINE_NAME}' ready for work"


source /tmp/docker-virtualbox.env
source /tmp/docker-virtualbox-machine.env

echo ""
echo "===> Configuring port forwarding for alrady running containers..."
while read -r subjectid
do
    ports="$(${DOCKER_CLI_BIN_PATH} inspect -f '{{range $p, $conf := .NetworkSettings.Ports }} {{ if $conf}} {{ index ($conf) 0}} {{end}} {{end}}' "${subjectid}" | sed -nE 's:\{[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}[^0-9]*([0-9]{1,})\}:\1:pg' | xargs echo -n)"
    [[ -z ${ports} ]] || {
        for port in $ports;  do
          echo ""
          echo "Enabling port forwarding: ${port} -> ${DOCKER_MACHINE_IP}:${port}"
          >&2 curl --silent -X POST --data "@-" http://127.0.0.1:8181/servers/${subjectid_short}_${port} <<JSON_BODY
{
  "backend_connection_timeout": "2s",
  "backend_idle_timeout": "1m",
  "balance": "weight",
  "bind": ":${port}",
  "client_idle_timeout": "1m",
  "max_connections": 10000,
  "protocol": "tcp",
  "discovery": {
    "kind": "static",
    "static_list": [
      "${DOCKER_MACHINE_IP}:${port} weight=1"
    ]
  }
}
JSON_BODY
        done
    }
done < <(${DOCKER_CLI_BIN_PATH} ps | tail -n +2 | awk '{ print $1 }')

echo ""
echo "===> Listen for events..."
[[ -f /tmp/docker-virtualbox.starting ]] && rm /tmp/docker-virtualbox.starting
while read -r event;
do
    subject=$(echo $event | awk '{ print $2 }')
    action=$(echo $event | awk '{ print $3 }')
    subjectid=$(echo $event | awk '{ print $4 }')
    subjectid_short=$(echo $subjectid | cut -c -8)
    if [[ "container" == ${subject} ]]; then
        case $action in
          "start")
            ports="$(${DOCKER_CLI_BIN_PATH} inspect -f '{{range $p, $conf := .NetworkSettings.Ports }} {{ if $conf}} {{ index ($conf) 0}} {{end}} {{end}}' "${subjectid}" | sed -nE 's:\{[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}[^0-9]*([0-9]{1,})\}:\1:pg' | xargs echo -n)"
            [[ -z ${ports} ]] || {
                for port in $ports;  do
                    echo ""
                    echo "Enabling port forwarding: ${port} -> ${DOCKER_MACHINE_IP}:${port}"
                    >&2 curl --silent -X POST --data "@-" http://127.0.0.1:8181/servers/${subjectid_short}_${port} <<JSON_BODY
{
  "backend_connection_timeout": "2s",
  "backend_idle_timeout": "1m",
  "balance": "weight",
  "bind": ":${port}",
  "client_idle_timeout": "1m",
  "max_connections": 10000,
  "protocol": "tcp",
  "discovery": {
    "kind": "static",
    "static_list": [
      "${DOCKER_MACHINE_IP}:${port} weight=1"
    ]
  }
}
JSON_BODY
                done
            }
            ;;
          "kill")
            servers=$(curl --silent http://127.0.0.1:8181/servers | ${JQ_BIN} -r '. | keys | .[]' | grep ${subjectid_short} || echo "")
            [[ $servers != "" ]] && {
              for server in $servers;  do
                  echo ""
                  echo "Disabling port forwarding for: ${server}"
                  curl --silent -X DELETE http://127.0.0.1:8181/servers/${server}
              done
            }
            ;;
          *)
            # skipping
            ;;
        esac
    fi
done < <(${DOCKER_CLI_BIN_PATH} events --since "${START_TIME}")

echo ""
echo "===> service terminated"
